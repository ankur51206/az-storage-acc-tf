name: 'Terraform Plan/Apply'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Permissions needed for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

# Environment variables used by the Terraform Azure provider
env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          
      - name: Create terraform.tfvars
        run: |
          echo "client_id = \"${{ secrets.AZURE_CLIENT_ID }}\"" > terraform.tfvars
          echo "client_secret = \"${{ secrets.AZURE_CLIENT_SECRET }}\"" >> terraform.tfvars
          echo "subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"" >> terraform.tfvars
          echo "tenant_id = \"${{ secrets.AZURE_TENANT_ID }}\"" >> terraform.tfvars
          ls -la
          cat terraform.tfvars


      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out=tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_ENV
          ls -la
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          elif [ $exitcode -eq 2 ]; then
            echo "Terraform Plan has changes."
          else
            echo "No changes detected."
          fi
        
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
        
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_ENV
          echo "## Terraform Plan Output" >> $GITHUB_ENV
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo '```terraform' >> $GITHUB_ENV
          echo "$TERRAFORM_PLAN" >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo "</details>" >> $GITHUB_ENV
          echo "${delimiter}" >> $GITHUB_ENV
        
      - name: Publish Terraform Plan to Task Summary
        run: |
          echo "${{ env.summary }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.summary}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
                
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == '2'
    runs-on: ubuntu-latest
    environment: production
    needs: terraform-plan

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
